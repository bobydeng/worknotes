/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2019-05-11 18:13:12.174028
/// Generated using solver translation3d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5;
x0=IKcos(j[1]);
x1=IKsin(j[2]);
x2=IKsin(j[1]);
x3=((0.05)*x2);
x4=IKcos(j[2]);
x5=((0.05)*x0);
eetrans[0]=((0.0395)+(((0.07)*x0))+((x4*x5))+(((-1.0)*(1.0)*x1*x3)));
eetrans[1]=((((0.07)*x2))+((x1*x5))+((x3*x4)));
eetrans[2]=((0.006)+j[0]);
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 3; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=((-0.0395)+px);
new_py=py;
new_pz=pz;
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=((-0.006)+pz);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
cj2array[0]=((-1.06228571428571)+(((142.857142857143)*(j0*j0)))+(((142.857142857143)*(px*px)))+(((142.857142857143)*(py*py)))+(((142.857142857143)*(pz*pz)))+(((-1.0)*(285.714285714286)*j0*pz)));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
IkReal x6=((px*px)+(py*py));
IkReal x7=((0.05)*cj2);
IkReal x8=((0.05)*sj2);
j1eval[0]=x6;
j1eval[1]=IKsign(x6);
j1eval[2]=((IKabs(((((0.07)*px))+((px*x7))+((py*x8)))))+(IKabs(((((0.07)*py))+((py*x7))+(((-1.0)*px*x8))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x9=((((1.4)*py))+((cj2*py))+((px*sj2)));
j1eval[0]=x9;
j1eval[1]=IKsign(x9);
j1eval[2]=((IKabs(((((0.07)*sj2))+(((20.0)*px*py))+(((0.05)*cj2*sj2)))))+(IKabs(((0.098)+(((0.14)*cj2))+(((0.05)*(cj2*cj2)))+(((-1.0)*(20.0)*(px*px)))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=((((1.4)*py))+((cj2*py))+((px*sj2)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x10=py*py;
if(((x10+(px*px))) < -0.00001)
continue;
IkReal x11=IKsqrt((x10+(px*px)));
IkReal x12=IKabs(x11);
CheckValue<IkReal> x18=IKPowWithIntegerCheck(x12,-1);
if(!x18.valid){
continue;
}
IkReal x13=x18.value;
IkReal x14=((1.4)*py*x13);
IkReal x19 = (x10+(px*px));
if(IKabs(x19)==0){
continue;
}
IkReal x15=pow(x19,-0.5);
IkReal x16=(px*x15);
CheckValue<IkReal> x20=IKPowWithIntegerCheck(x12,-2);
if(!x20.valid){
continue;
}
if((((1.0)+(((-1.96)*x10*(x20.value))))) < -0.00001)
continue;
IkReal x17=IKsqrt(((1.0)+(((-1.96)*x10*(x20.value)))));
if( (x14) < -1-IKFAST_SINCOS_THRESH || (x14) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x21 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x21.valid){
continue;
}
IkReal gconst0=((((-1.0)*(IKasin(x14))))+(((-1.0)*(1.0)*(x21.value))));
IkReal gconst1=((((-1.0)*x14*x16))+(((-1.0)*py*x15*x17)));
IkReal gconst2=(((x16*x17))+(((-1.4)*x10*x13*x15)));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x22=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x22.valid){
continue;
}
if( (((1.4)*py*(x22.value))) < -1-IKFAST_SINCOS_THRESH || (((1.4)*py*(x22.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x23 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x23.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j2+(IKasin(((1.4)*py*(x22.value))))+(x23.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x24=py*py;
IkReal x25=x11;
IkReal x26=IKabs(x25);
CheckValue<IkReal> x33=IKPowWithIntegerCheck(x26,-1);
if(!x33.valid){
continue;
}
IkReal x27=x33.value;
IkReal x28=((1.4)*py*x27);
if( (x28) < -1-IKFAST_SINCOS_THRESH || (x28) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x34 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x34.valid){
continue;
}
IkReal x29=((((-1.0)*(IKasin(x28))))+(((-1.0)*(1.0)*(x34.value))));
IkReal x30=x15;
IkReal x31=(px*x30);
CheckValue<IkReal> x35=IKPowWithIntegerCheck(x26,-2);
if(!x35.valid){
continue;
}
if((((1.0)+(((-1.96)*x24*(x35.value))))) < -0.00001)
continue;
IkReal x32=IKsqrt(((1.0)+(((-1.96)*x24*(x35.value)))));
sj2=gconst1;
cj2=gconst2;
j2=x29;
IkReal gconst0=x29;
IkReal gconst1=((((-1.0)*x28*x31))+(((-1.0)*py*x30*x32)));
IkReal gconst2=(((x31*x32))+(((-1.4)*x24*x27*x30)));
IkReal x36=((px*px)+(py*py));
j1eval[0]=x36;
j1eval[1]=IKsign(x36);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x37=((20.0)*gconst1);
IkReal x38=((20.0)*gconst2);
CheckValue<IkReal> x39=IKPowWithIntegerCheck(IKsign(((1.96)+(gconst1*gconst1)+(gconst2*gconst2)+(((2.8)*gconst2)))),-1);
if(!x39.valid){
continue;
}
CheckValue<IkReal> x40 = IKatan2WithCheck(IkReal(((((28.0)*py))+((py*x38))+(((-1.0)*px*x37)))),IkReal(((((28.0)*px))+((px*x38))+((py*x37)))),IKFAST_ATAN2_MAGTHRESH);
if(!x40.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x39.value)))+(x40.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x41=((0.05)*gconst1);
IkReal x42=IKsin(j1);
IkReal x43=IKcos(j1);
IkReal x44=((1.0)*py);
IkReal x45=((0.05)*gconst2);
IkReal x46=((1.0)*px);
evalcond[0]=(x41+((px*x42))+(((-1.0)*x43*x44)));
evalcond[1]=((0.07)+x45+(((-1.0)*x42*x44))+(((-1.0)*x43*x46)));
evalcond[2]=((((-1.0)*x46))+(((0.07)*x43))+((x43*x45))+(((-1.0)*x41*x42)));
evalcond[3]=((((-1.0)*x44))+(((0.07)*x42))+((x41*x43))+((x42*x45)));
evalcond[4]=((-0.0024)+(((-1.0)*(1.0)*(px*px)))+(((-1.0)*(1.0)*(py*py)))+(((0.14)*px*x43))+(((0.14)*py*x42)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x47=((0.05)*gconst1);
IkReal x48=((0.05)*gconst2);
CheckValue<IkReal> x49=IKPowWithIntegerCheck(IKsign(((px*px)+(py*py))),-1);
if(!x49.valid){
continue;
}
CheckValue<IkReal> x50 = IKatan2WithCheck(IkReal(((((0.07)*py))+((py*x48))+(((-1.0)*px*x47)))),IkReal(((((0.07)*px))+((px*x48))+((py*x47)))),IKFAST_ATAN2_MAGTHRESH);
if(!x50.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x49.value)))+(x50.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x51=((0.05)*gconst1);
IkReal x52=IKsin(j1);
IkReal x53=IKcos(j1);
IkReal x54=((1.0)*py);
IkReal x55=((0.05)*gconst2);
IkReal x56=((1.0)*px);
evalcond[0]=(x51+((px*x52))+(((-1.0)*x53*x54)));
evalcond[1]=((0.07)+x55+(((-1.0)*x52*x54))+(((-1.0)*x53*x56)));
evalcond[2]=((((-1.0)*x56))+(((0.07)*x53))+((x53*x55))+(((-1.0)*x51*x52)));
evalcond[3]=((((-1.0)*x54))+(((0.07)*x52))+((x51*x53))+((x52*x55)));
evalcond[4]=((-0.0024)+(((-1.0)*(1.0)*(px*px)))+(((-1.0)*(1.0)*(py*py)))+(((0.14)*px*x53))+(((0.14)*py*x52)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x57=py*py;
if(((x57+(px*px))) < -0.00001)
continue;
IkReal x58=IKsqrt((x57+(px*px)));
IkReal x59=IKabs(x58);
CheckValue<IkReal> x65=IKPowWithIntegerCheck(x59,-1);
if(!x65.valid){
continue;
}
IkReal x60=x65.value;
IkReal x61=((1.4)*py*x60);
IkReal x66 = (x57+(px*px));
if(IKabs(x66)==0){
continue;
}
IkReal x62=pow(x66,-0.5);
IkReal x63=(px*x62);
CheckValue<IkReal> x67=IKPowWithIntegerCheck(x59,-2);
if(!x67.valid){
continue;
}
if((((1.0)+(((-1.96)*x57*(x67.value))))) < -0.00001)
continue;
IkReal x64=((1.0)*(IKsqrt(((1.0)+(((-1.96)*x57*(x67.value)))))));
CheckValue<IkReal> x68 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x68.valid){
continue;
}
if( (x61) < -1-IKFAST_SINCOS_THRESH || (x61) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*(1.0)*(x68.value)))+(IKasin(x61)));
IkReal gconst4=((((-1.0)*x61*x63))+((py*x62*x64)));
IkReal gconst5=((((-1.0)*x63*x64))+(((-1.4)*x57*x60*x62)));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x69=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x69.valid){
continue;
}
if( (((1.4)*py*(x69.value))) < -1-IKFAST_SINCOS_THRESH || (((1.4)*py*(x69.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x70 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x70.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2+(((-1.0)*(1.0)*(IKasin(((1.4)*py*(x69.value))))))+(x70.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x71=py*py;
IkReal x72=x58;
IkReal x73=IKabs(x72);
CheckValue<IkReal> x80=IKPowWithIntegerCheck(x73,-1);
if(!x80.valid){
continue;
}
IkReal x74=x80.value;
IkReal x75=((1.4)*py*x74);
CheckValue<IkReal> x81 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x81.valid){
continue;
}
if( (x75) < -1-IKFAST_SINCOS_THRESH || (x75) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x76=((((-1.0)*(1.0)*(x81.value)))+(IKasin(x75)));
IkReal x77=x62;
IkReal x78=(px*x77);
CheckValue<IkReal> x82=IKPowWithIntegerCheck(x73,-2);
if(!x82.valid){
continue;
}
if((((1.0)+(((-1.96)*x71*(x82.value))))) < -0.00001)
continue;
IkReal x79=((1.0)*(IKsqrt(((1.0)+(((-1.96)*x71*(x82.value)))))));
sj2=gconst4;
cj2=gconst5;
j2=((3.14159265)+x76);
IkReal gconst3=((3.14159265358979)+x76);
IkReal gconst4=((((-1.0)*x75*x78))+((py*x77*x79)));
IkReal gconst5=((((-1.0)*x78*x79))+(((-1.4)*x71*x74*x77)));
IkReal x83=((px*px)+(py*py));
j1eval[0]=x83;
j1eval[1]=IKsign(x83);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x84=IKPowWithIntegerCheck(IKsign(((((1.4)*py))+((gconst4*px))+((gconst5*py)))),-1);
if(!x84.valid){
continue;
}
CheckValue<IkReal> x85 = IKatan2WithCheck(IkReal(((0.098)+(((0.14)*gconst5))+(((0.05)*(gconst5*gconst5)))+(((-1.0)*(20.0)*(px*px))))),IkReal(((((0.07)*gconst4))+(((20.0)*px*py))+(((0.05)*gconst4*gconst5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x85.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x84.value)))+(x85.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x86=((0.05)*gconst4);
IkReal x87=IKsin(j1);
IkReal x88=IKcos(j1);
IkReal x89=((1.0)*py);
IkReal x90=((0.05)*gconst5);
IkReal x91=((1.0)*px);
evalcond[0]=(x86+((px*x87))+(((-1.0)*x88*x89)));
evalcond[1]=((0.07)+x90+(((-1.0)*x87*x89))+(((-1.0)*x88*x91)));
evalcond[2]=((((-1.0)*x91))+(((0.07)*x88))+((x88*x90))+(((-1.0)*x86*x87)));
evalcond[3]=((((-1.0)*x89))+(((0.07)*x87))+((x86*x88))+((x87*x90)));
evalcond[4]=((-0.0024)+(((-1.0)*(1.0)*(px*px)))+(((-1.0)*(1.0)*(py*py)))+(((0.14)*px*x88))+(((0.14)*py*x87)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x92=((0.05)*gconst4);
IkReal x93=((0.05)*gconst5);
CheckValue<IkReal> x94=IKPowWithIntegerCheck(IKsign(((px*px)+(py*py))),-1);
if(!x94.valid){
continue;
}
CheckValue<IkReal> x95 = IKatan2WithCheck(IkReal(((((0.07)*py))+((py*x93))+(((-1.0)*px*x92)))),IkReal(((((0.07)*px))+((px*x93))+((py*x92)))),IKFAST_ATAN2_MAGTHRESH);
if(!x95.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x94.value)))+(x95.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x96=((0.05)*gconst4);
IkReal x97=IKsin(j1);
IkReal x98=IKcos(j1);
IkReal x99=((1.0)*py);
IkReal x100=((0.05)*gconst5);
IkReal x101=((1.0)*px);
evalcond[0]=(x96+((px*x97))+(((-1.0)*x98*x99)));
evalcond[1]=((0.07)+x100+(((-1.0)*x101*x98))+(((-1.0)*x97*x99)));
evalcond[2]=((((-1.0)*x101))+(((0.07)*x98))+((x100*x98))+(((-1.0)*x96*x97)));
evalcond[3]=((((-1.0)*x99))+(((0.07)*x97))+((x100*x97))+((x96*x98)));
evalcond[4]=((-0.0024)+(((-1.0)*(1.0)*(px*px)))+(((-1.0)*(1.0)*(py*py)))+(((0.14)*px*x98))+(((0.14)*py*x97)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((px*px)+(py*py));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
j1array[0]=0;
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x102=(cj2*py);
IkReal x103=(px*sj2);
CheckValue<IkReal> x104=IKPowWithIntegerCheck(((((20.0)*x102))+(((20.0)*x103))+(((28.0)*py))),-1);
if(!x104.valid){
continue;
}
CheckValue<IkReal> x105=IKPowWithIntegerCheck((x102+x103+(((1.4)*py))),-1);
if(!x105.valid){
continue;
}
if( IKabs(((x104.value)*(((-1.0)+(cj2*cj2)+(((400.0)*(py*py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x105.value)*(((((0.07)*sj2))+(((20.0)*px*py))+(((0.05)*cj2*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x104.value)*(((-1.0)+(cj2*cj2)+(((400.0)*(py*py)))))))+IKsqr(((x105.value)*(((((0.07)*sj2))+(((20.0)*px*py))+(((0.05)*cj2*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x104.value)*(((-1.0)+(cj2*cj2)+(((400.0)*(py*py)))))), ((x105.value)*(((((0.07)*sj2))+(((20.0)*px*py))+(((0.05)*cj2*sj2))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x106=((0.05)*sj2);
IkReal x107=IKsin(j1);
IkReal x108=IKcos(j1);
IkReal x109=((1.0)*py);
IkReal x110=((0.05)*cj2);
IkReal x111=((1.0)*px);
evalcond[0]=(x106+((px*x107))+(((-1.0)*x108*x109)));
evalcond[1]=((0.07)+x110+(((-1.0)*x107*x109))+(((-1.0)*x108*x111)));
evalcond[2]=((((-1.0)*x111))+(((0.07)*x108))+((x108*x110))+(((-1.0)*x106*x107)));
evalcond[3]=((((-1.0)*x109))+(((0.07)*x107))+((x106*x108))+((x107*x110)));
evalcond[4]=((-0.002364)+(((-1.0)*(1.0)*(j0*j0)))+(((-1.0)*(1.0)*(px*px)))+(((-1.0)*(1.0)*(py*py)))+(((-1.0)*(1.0)*(pz*pz)))+(((2.0)*j0*pz))+(((0.14)*px*x108))+(((0.14)*py*x107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x112=IKPowWithIntegerCheck(IKsign(((((1.4)*py))+((cj2*py))+((px*sj2)))),-1);
if(!x112.valid){
continue;
}
CheckValue<IkReal> x113 = IKatan2WithCheck(IkReal(((0.098)+(((0.14)*cj2))+(((0.05)*(cj2*cj2)))+(((-1.0)*(20.0)*(px*px))))),IkReal(((((0.07)*sj2))+(((20.0)*px*py))+(((0.05)*cj2*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x113.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x112.value)))+(x113.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x114=((0.05)*sj2);
IkReal x115=IKsin(j1);
IkReal x116=IKcos(j1);
IkReal x117=((1.0)*py);
IkReal x118=((0.05)*cj2);
IkReal x119=((1.0)*px);
evalcond[0]=(x114+((px*x115))+(((-1.0)*x116*x117)));
evalcond[1]=((0.07)+x118+(((-1.0)*x115*x117))+(((-1.0)*x116*x119)));
evalcond[2]=((((-1.0)*x119))+(((0.07)*x116))+((x116*x118))+(((-1.0)*x114*x115)));
evalcond[3]=((((-1.0)*x117))+(((0.07)*x115))+((x114*x116))+((x115*x118)));
evalcond[4]=((-0.002364)+(((-1.0)*(1.0)*(j0*j0)))+(((-1.0)*(1.0)*(px*px)))+(((-1.0)*(1.0)*(py*py)))+(((-1.0)*(1.0)*(pz*pz)))+(((2.0)*j0*pz))+(((0.14)*px*x116))+(((0.14)*py*x115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x120=((0.05)*cj2);
IkReal x121=((0.05)*sj2);
CheckValue<IkReal> x122=IKPowWithIntegerCheck(IKsign(((px*px)+(py*py))),-1);
if(!x122.valid){
continue;
}
CheckValue<IkReal> x123 = IKatan2WithCheck(IkReal(((((0.07)*py))+((py*x120))+(((-1.0)*px*x121)))),IkReal(((((0.07)*px))+((px*x120))+((py*x121)))),IKFAST_ATAN2_MAGTHRESH);
if(!x123.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x122.value)))+(x123.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x124=((0.05)*sj2);
IkReal x125=IKsin(j1);
IkReal x126=IKcos(j1);
IkReal x127=((1.0)*py);
IkReal x128=((0.05)*cj2);
IkReal x129=((1.0)*px);
evalcond[0]=(x124+((px*x125))+(((-1.0)*x126*x127)));
evalcond[1]=((0.07)+x128+(((-1.0)*x125*x127))+(((-1.0)*x126*x129)));
evalcond[2]=((((-1.0)*x129))+(((0.07)*x126))+((x126*x128))+(((-1.0)*x124*x125)));
evalcond[3]=((((-1.0)*x127))+(((0.07)*x125))+((x124*x126))+((x125*x128)));
evalcond[4]=((-0.002364)+(((-1.0)*(1.0)*(j0*j0)))+(((-1.0)*(1.0)*(px*px)))+(((-1.0)*(1.0)*(py*py)))+(((-1.0)*(1.0)*(pz*pz)))+(((2.0)*j0*pz))+(((0.14)*px*x126))+(((0.14)*py*x125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 17;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - myrobot (ad2bad858fcb4c5fefa53c19e1d609e1)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
